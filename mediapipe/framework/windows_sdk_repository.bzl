build_file_template = '''
# ! Auto generated by windows_sdk_repository.bzl !
# Description
#    {DESC}
# Found Libs:
#    {REAL_LIBS}
# Found Headers:
#    {REAL_HDRS}

cc_library(
    name = "{NAME}",
    srcs = [{LIBS}],
    hdrs = [{HDRS}],
    includes = ["include/"],
    visibility = ["//visibility:public"],
)
'''

def _find_file_in_list(ctx, filename, dir_list):
    for dir in dir_list:
        try_path = ctx.path(dir).get_child(filename)
        if try_path.exists:
            return try_path
    fail("File ", filename, " not found. Folders searched:", "\n    ".join(dir_list))

def _symlink_files_from_env(ctx, files, env_name, repo_dir):
    paths = []
    dir_list = ctx.os.environ.get(env_name).split(";")
    for file in files:
        real_path = _find_file_in_list(ctx, file, dir_list)
        ctx.symlink(real_path, ctx.path(repo_dir).get_child(file))
        paths.append(str(real_path))
    return paths

def _impl_windows_sdk_repository(ctx):
    libs = _symlink_files_from_env(ctx, ctx.attr.libs, "LIB", "lib")
    hdrs = _symlink_files_from_env(ctx, ctx.attr.hdrs, "INCLUDE", "include")

    build_content = build_file_template.format(
        NAME = ctx.name,
        DESC = ctx.attr.desc,
        REAL_LIBS = "\n#    ".join(libs),
        REAL_HDRS = "\n#    ".join(hdrs),
        LIBS = "\"lib/" + "\",\"lib/".join(ctx.attr.libs) + "\"",
        HDRS = "\"include/" + "\",\"include/".join(ctx.attr.hdrs) + "\""
    )
    ctx.file(ctx.path("BUILD"), content = build_content)

windows_sdk_repository = repository_rule(
    implementation = _impl_windows_sdk_repository,
    environ = ["INCLUDE", "LIB"],
    attrs = {
        "desc": attr.string(),
        "libs": attr.string_list(),
        "hdrs": attr.string_list(),
    }
)